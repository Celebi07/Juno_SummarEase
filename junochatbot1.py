# -*- coding: utf-8 -*-
"""junochatbot1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QVWCKtL20PahZpYiaKj8IXuqqqFdYCZF
"""

!pip install python-telegram-bot
!pip install youtube_transcript_api
!pip install openai
!pip install --upgrade python-telegram-bot
!pip install python-telegram-bot==13.7
!pip install pyTelegramBotAPI
!pip install transformers
!pip install textract
!pip install bs4

import re
from youtube_transcript_api import YouTubeTranscriptApi
from youtube_transcript_api.formatters import TextFormatter
import openai
import os
import textwrap
import requests
from bs4 import BeautifulSoup
import textwrap
import textract

openai.api_key = "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"
PROMPT_STRING = "Summarize the following text:\n<<SUMMARY>>\n"
import os
import telebot

my_telegrambot_secret = "5632868573:AAHVK_LEzgFKNgy9SHUPC2M_9yX-B1l8YDs"
# API_KEY = os.getenv('API_KEY')
bot = telebot.TeleBot(my_telegrambot_secret)

# Create your AI model functions here


def summarize_video(video_link):
    # Extract the video ID from the link
    video_id = video_link.split("=")[-1]

    # Get transcript for given YouTube video id
    transcript = YouTubeTranscriptApi.get_transcript(video_id)

    # Format transcript using TextFormatter from youtube_transcript_api library
    formatter = TextFormatter()
    transcript = formatter.format_transcript(transcript)

    video_length = len(transcript)

    # If the video is ~25 minutes or more, double the chunk size
    # This is done to reduce overall amount of API calls
    chunk_size = 4000 if video_length >= 25000 else 2000

    # Wrap the transcript in chunks of characters
    chunks = textwrap.wrap(transcript, chunk_size)

    summaries = []

    # For each chunk of characters, generate a summary
    for chunk in chunks:
        prompt = f"Write a detailed summary of the following:\n\n{chunk}\n"

        # Generate summary using GPT-3
        # If the davinci model is incurring too much cost, 
        # the text-curie-001 model may be used in its place.
        response = openai.Completion.create(
            model="text-davinci-003", prompt=prompt, max_tokens=256
        )
        summary = re.sub("\s+", " ", response.choices[0].text.strip())
        summaries.append(summary)

    # Join the chunk summaries into one string
    chunk_summaries = " ".join(summaries)
    prompt = f"Write a detailed summary of the following:\n\n{chunk_summaries}\n"

    # Generate a final summary from the chunk summaries
    response = openai.Completion.create(
        model="text-davinci-003", prompt=prompt, max_tokens=2056
    )
    final_summary = re.sub("\s+", " ", response.choices[0].text.strip())

    # Return all of the summaries as a dictionary
    
    return final_summary
    

def summarize_website(url):
    # Get the text content from the website
    print("website0")
    website_text = get_website_text(url)
    print("website1")


    # Split the text content into chunks of characters
    chunk_size = 2000
    chunks = textwrap.wrap(website_text, chunk_size)
    print(chunks)
    summaries = list()

    # For each chunk of characters, generate a summary
    for chunk in chunks:
        print("website2")
        prompt = PROMPT_STRING.replace("<<SUMMARY>>", chunk)

        print(f"prompt0: {prompt}")
        # Generate summary using GPT-3
        response = openai.Completion.create(
            model="text-davinci-002", prompt=prompt, max_tokens=256
        )
        print("website3")

        summary = re.sub("\s+", " ", response.choices[0].text.strip())
        summaries.append(summary)

    # Join the chunk summaries into one string
    chunk_summaries = " ".join(summaries)
    prompt = PROMPT_STRING.replace("<<SUMMARY>>", chunk_summaries)
    print(f"prompt: {prompt}")

    # Generate a final summary from the chunk summaries
    response = openai.Completion.create(
        model="text-davinci-002", prompt=prompt, max_tokens=2056
    )
    final_summary = re.sub("\s+", " ", response.choices[0].text.strip())
    print("website5")

    return final_summary
    
def summarize_pdf(file_name):
    # Extract text from PDF
    text = textract.process(file_name).decode('utf-8')

    # Summarize the extracted text using GPT-3
    summary = openai.Completion.create(
        model="text-davinci-002",
        prompt=f"Please summarize the following text:\n{text}",
        temperature=0,
        # max_tokens=200
    )

    return summary.choices[0].text.strip()

def get_website_text(url):
    # Make a GET request to the website URL
    response = requests.get(url)

    # Parse the HTML content using BeautifulSoup
    soup = BeautifulSoup(response.content, 'html.parser')

    # Extract the text content from the HTML using the 'get_text' method
    website_text = soup.get_text()

    # Remove any extra whitespace and newlines
    website_text = re.sub(r'\s+', ' ', website_text).strip()
    print(website_text)
    return website_text

# Create a function to determine the type of the link

# Create a function to handle incoming messages
def handle_message(message):
    
     if message.document:
        
        file_id = message.document.file_id
        file_name = message.document.file_name

        bot = telebot.TeleBot("5632868573:AAHVK_LEzgFKNgy9SHUPC2M_9yX-B1l8YDs")
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path

        # Download the file to the server
        downloaded_file = bot.download_file(file_path)
        with open(file_name, 'wb') as f:
            f.write(downloaded_file)
        
        pdf_path = file_name
        
        textt = summarize_pdf(pdf_path)
        
        return textt
        
    # Check if message contains a YouTube link
     elif 'youtube.com' in message.text or 'youtu.be' in message.text:
        # Get YouTube video ID and summarize transcript
        summary = summarize_video(message.text)
        
        # Send summary as message
        return summary
    # Check if message contains a website link
     
     elif message.entities and message.entities[0].type == 'url':
    #     # Get website link and summarize content
        website_link = message.text[message.entities[0].offset:message.entities[0].offset+message.entities[0].length]
        summary = summarize_website(website_link)
        return summary
    
    
     else:
        # Send error message
        return 'sorry i dont know how to summariseÂ that!'
@bot.message_handler(commands=['Greet'])
def greet(message):
    bot.reply_to(message, "Hey! How's it going?")

@bot.message_handler(commands=['hello'])
def hello(message):
    bot.send_message(message.chat.id, "Hello!")

@bot.message_handler(commands=['start'])
def ask_content_type(message):
    bot.send_message(chat_id=message.chat.id, text="What type of content do you want to summarize? Please choose one of the following options:\n\n1. YouTube video\n2. Website link\n3. Document")

    bot.register_next_step_handler(message, process_content_type)

def process_content_type(message):
    content_type = message.text.lower()

    if content_type == 'youtube video':
        bot.send_message(chat_id=message.chat.id, text="Please enter the YouTube video URL you want to summarize")
        bot.register_next_step_handler(message, summarize_youtube_video)
    elif content_type == 'website link':
        bot.send_message(chat_id=message.chat.id, text="Please enter the website URL you want to summarize")
        bot.register_next_step_handler(message, summarize_website_link)
    elif content_type == 'document':
        bot.send_message(chat_id=message.chat.id, text="Please upload the document you want to summarize")
        bot.register_next_step_handler(message, summarize_document)
    else:
        bot.send_message(chat_id=message.chat.id, text="Sorry, I didn't understand that. Please choose one of the following options:\n\n1. YouTube video\n2. Website link\n3. Document")
        bot.register_next_step_handler(message, process_content_type)

def summarize_youtube_video(message):
    print("yt")
    video_url = message.text
    summary = summarize_video(video_url)
    bot.send_message(chat_id=message.chat.id, text=summary)

def summarize_website_link(message):
    print("website")
    website_url = message.text
    summary = summarize_website(website_url)
    bot.send_message(chat_id=message.chat.id, text=summary)

@bot.message_handler(content_types=['document'])
def summarize_document(message):
    # handle uploaded document
        file_id = message.document.file_id
        file_name = message.document.file_name

        bot = telebot.TeleBot("5632868573:AAHVK_LEzgFKNgy9SHUPC2M_9yX-B1l8YDs")
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path

        # Download the file to the server
        downloaded_file = bot.download_file(file_path)
        with open(file_name, 'wb') as f:
            f.write(downloaded_file)
        
        pdf_path = file_name
        
        textt = summarize_pdf(pdf_path)
        bot.send_message(chat_id=message.chat.id, text=textt)

bot.polling()